}
confusionMatrix(testing$diagnosis, PCA.training(7))
preProc <- preProcess(training.IL, method="pca", pcaComp=n.pca)
preProc <- preProcess(training.IL, method="pca", pcaComp=7)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, PCA.training(7))
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
head(testPC)
str(testPC)
a <- function(abcd){}
a <- function(abcd){
ab <- c(1:10)
cd <- c(11:20)
df.a <- data.frame(ab, cd)
return(df.a)
}
a(3)
a <- function(abcd){
ab <- rnorm(abcd)
cd <- rnorm(abcd)
df.a <- data.frame(ab, cd)
data.frame(df.a)
}
a(3)
a(3)
a(3)
a(3)
data.frame(a(3))
a(3)
str(a(3))
str(testPC)
rm(list=ls())
##### Problem 4 #####
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL.id <- c(58:69)
training.IL <- training[, c(IL.id)]
testing.IL <- testing[, c(IL.id)]
preProc <- preProcess(training.IL, method="pca", pcaComp=7)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training.IL, method="pca", pcaComp=8)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training.IL, method="pca", pcaComp=9)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training.IL, method="pca", pcaComp=11)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
4 + 3 + 18 + 57
4 + 3 + 18 + 57
preProc <- preProcess(training.IL, method="pca", pcaComp=11)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training.IL, method="pca", pcaComp=7)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training.IL, method="pca", pcaComp=8)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training.IL, method="pca", pcaComp=9)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
(1+58)/82
(2+58)/82
(4+57)/82
preProc <- preProcess(training.IL, method="pca", thresh=0.9)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
rm(list=ls())
##### Problem 5 #####
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL.id <- c(58:69)
training.IL <- training[, c(IL.id)]
testing.IL <- testing[, c(IL.id)]
preProc <- preProcess(training.IL, method="pca", thresh=0.8)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
rm(list=ls())
##### Quiz 1 #####
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
##### Quiz 3 #####
library(pgmm)
install.packages("pgmm")
##### Quiz 3 #####
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
##### Quiz 4 #####
library(ElemStatLearn)
install.packages("ElemStatLearn")
install.packages("Rtools")
version
version
install.packages("Rtools")
##### Quiz 1 #####
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
names(segmentationOriginal)
names(segmentationOriginal$Case)
head(segmentationOriginal$Case)
training <- subset(Case=="Train")
?subset
training <- subset(segmentationOriginal, Case=="Train")
sum(segmentationOriginal$Case=="Train")
head(segmentationOriginal$Cell)
head(segmentationOriginal$Class)
training <- subset(segmentationOriginal, Case=="Train")
testing <- subset(segmentationOriginal, Case=="Test")
set.seed(125)
modelFit <- train(Class ~ ., method="rpart", data=training)
print(modelFit$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modelFit$finalModel)
library(leaflet)
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=-76.5988801, popup="Jee Leek")
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=-76.5988801, popup="Jee Leek")
my_map
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>%
addMarkers(lat=39.298, lng=-76.598, popup="Jee Leek")
my_map
set.seed(2016-04-25)
df <- data.frame(lat=runif(20, min=39.2, max=39.3),
lng=runif(20, min=-76.6, max=-76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
df
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=-76.5988801, popup="Jee Leek")
my_map
set.seed(2016-04-25)
df <- data.frame(lat=runif(20, min=39.2, max=39.3),
lng=runif(20, min=-76.6, max=-76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
df <- data.frame(lat=runif(500, min=39.25, max=39.35),
lng=runif(500, min=-76.65, max=-76.55))
df %>%
leaflet %>%
addTiles %>%
addMarkers(clusterOptions = markerClusterOptions())
df <- data.frame(lat=runif(20, min=39.25, max=39.35),
lng=runif(20, min=-76.65, max=-76.55))
df %>%
leaflet %>%
addTiles %>%
addCircleMarkers()
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=37.434424, lng=127.128252, pop="Jihan's clinic")
my_map
View(my_map)
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=37.434424, lng=127.128252, pop="Jihan's clinic")
my_map <- leaflet() %>%
addTiles()
my_map <- mymap %>%
addMarkers(lat=37.434424, lng=127.128252, pop="Jihan's clinic")
my_map <- my_map %>%
addMarkers(lat=37.434424, lng=127.128252, pop="Jihan's clinic")
my_map <- leaflet() %>%
addTiles()
my_map <- my_map %>%
addMarkers(lat=37.434424, lng=127.128252, popup="Jihan's clinic")
my_map
rm(list=ls())
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=37.434424, lng=127.128252, popup="Jihan's clinic")
my_map
library(leaflet)
##### List of hospital at Sungnam city #####
hosp.list <- matrix( c(
37.434424, 127.128252, "St Mary's will hospital",
37.433154, 127.129692, "SK healthcare center",
37.432860, 127.130368, "Moran Yeonsei clinic",
37.430488, 127.128846, "Sinui clinic",
37.430714, 127.129783, "Moran mental health clinic",
37.438611, 127.127411, "Saesomang hospital",
37.439907, 127.128970, "Chung Hospital",
37.440874, 127.132449, "Sungnam orthopediatric clinic",
37.441811, 127.135692, "Jeil psychologic clinic",
37.442557, 127.137967, "Clean psychologic clinic",
37.443762, 127.140183, "Jiwoo hospital",
37.440821, 127.130456, "Kwack women's hospital",
37.440633, 127.131486, "Soo clinic",
37.440838, 127.132129, "Yeonsei Internal medicine clinic",
37.446012, 127.134176, "E-med hospital",
37.442571, 127.136386, "Hansol orthopediatric clinic",
37.445280, 127.139068, "Sungnam Clinic",
37.444189, 127.143145, "Ha clinic",
37.438090, 127.140806, "Cham Seoul Radiology",
37.439334, 127.142995, "Happy psychologic clinic",
37.439998, 127.144003, "Huen hospital",
37.439573, 127.145227, "MaumBit psychologic clinic",
37.442605, 127.150956, "Good dream psychologic clinic",
37.448984, 127.145335, "Hyosaran hospital",
37.453127, 127.161924, "Sungnam Joongang hospital",
37.445466, 127.162470, "Barunmadi hospital",
37.416550, 127.120654, "Bundang Yeonsei hospital",
37.410524, 127.126844, "Barunsesang hospital",
37.413127, 127.129211, "Bundang Chuck hospital",
37.410066, 127.125418, "Cha general hospital",
37.412331, 127.129733, "Best Bundang clinic",
37.412741, 127.129156, "Sungmo psychologic clinic",
37.413560, 127.129511, "Yeonsei Modoo clinic",
37.417368, 127.126759, "Joongang Leader's dental clinic",
37.417079, 127.133981, "Kids-M pediatric clinic" ), ncol=3, byrow=TRUE)
hosp.list <- as.data.frame(hosp.list)
colnames(hosp.list) <- c("lat", "lng", "hosp.name")
### adjusting variable types ###
hosp.list$lat <- as.character(hosp.list$lat)
hosp.list$lat <- as.numeric(hosp.list$lat)
hosp.list$lng <- as.character(hosp.list$lng)
hosp.list$lng <- as.numeric(hosp.list$lng)
hosp.list$hosp.name <- as.character(hosp.list$hosp.name)
##### Draw map - popup & cluster #####
hosp.list[, c(1, 2)] %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup=hosp.list$hosp.name, clusterOptions = markerClusterOptions()) %>%
addRectangles(lat1=37.410, lng1=127.120,
lat2=37.455, lng2=127.163,
fillColor="transparent")
library(plotly)
install.packages("plotly")
library(plotly)
head(mpg)
?mpg
?mtcars
head(mtcars)
dim(mpg)
dim(mtcars)
dim(mpg)
str(mpg)
table(mpg$manufacturer)
table(mpg$model)
table(mpg$trans)
table(mpg$drv)
table(mpg$fl)
table(mpg$class)
head(mpg)
table(mpg$displ)
table(mpg$cty)
table(mpg$hwy)
str(mpg)
head(mpg)
table(mpg$displ)
plot(displ, cty, data=mpg)
plot(displ~cty, data=mpg)
plot(cty~hwy, data=mpg)
plot(mpg)
is.na(mpg)
sum(is.na(mpg))
plot(mpg)
head(mtcars)
plot(mtcars)
plot(mpg~wt, data=mtcars)
head(mpt)
head(mpg)
str(mpg)
head(mtcars)
plot(mpg~cyl, data=mtcars)
plot(mpg~factor(cyl), data=mtcars)
g <- ggplot(mpg~wt, data=mtcars)
g <- ggplot(mpg~wt, data=mtcars) + aes()
rm(list=ls())
version()
version
library(library(shiny)
ui <- fluidPage(
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
library(shiny)
install.packages("shiny")
library(shiny)
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
? rnorm
shiny::runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp()
runApp('C:/Users/pc/Desktop/Jihan/DDP')
a <- 0.05;  b <- 0.2
effect.size <- 0.5
mu0 <- 0;  std.drv0 <- 1;  std.drv1 <- 1
one.two <- TRUE
n1 <- NA;  n1.n0 <- 1;
two.sided <- 1;
mu1 <- mu0 + effect.size;
if(one.two == TRUE) two.sided <- 2
za <- qnorm(a/two.sided, lower.tail=FALSE)
zb <- qnorm(b, lower.tail=FALSE)
q12 <- NULL
if(n1.n0 >= 1){
q12 <- 1 + 1/n1.n0
} else {
q12 <- 1 + n1.n0
}
est.sample.size <- ( (za + zb)^2 * std.drv0^2 * (q12) ) / (effect.size^2)
if(is.na(n1)){
n1 <- est.sample.size
}
n0 <- n1/n1.n0
std.err0 <- std.drv0 / sqrt(n0/2)
std.err1 <- std.drv1 / sqrt(n1/2)
x <- seq(from = mu0 - 5*std.err0, to = mu1 + 5*std.err1, by=0.01)
h0 <- dnorm(x, mean=mu0, sd=std.err0)
h1 <- dnorm(x, mean=mu1, sd=std.err1)
h.norm <- data.frame(x, h0, h1)
a.h0 <- qnorm(a/two.sided, mean=mu0, sd=std.err0, lower.tail=FALSE)
b.h1 <- qnorm(b, mean=mu1, sd=std.err1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=a.h0) +
geom_vline(xintercept=b.h1, linetype="dashed", show.legend=TRUE) +
geom_ribbon(data=subset(h.norm, a.h0 <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= a.h0),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
power.b <- pnorm(qnorm(a/two.sided, mean=mu0, sd=std.err0, lower.tail=FALSE),
mean=mu1, sd=std.err1, lower.tail=FALSE)
cat("suggested sample size :", est.sample.size, "\n")
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate\n")
} else{
cat("Power :", power.b, "- inadequate\n")
}
runApp('C:/Users/pc/Desktop/Jihan/DDP')
rm(list=ls())
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
install.packages('rsconnect')
install.packages("rsconnect")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='0zhbiQTbLDfBsQmB6AN3xrFJyYoEubCPV0Uc52Cw')
shiny::runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
?solve
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set=set, get=get,
setinv=setinv,
getinv=getinv)
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
?iris
mean(iris[iris$Species=="virginica",]$Sepal.Length, na.rm=TRUE)
head(iris)
?apply
apply(iris[, 1:4], 2, mean)
?mtcars
?tapply
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
abs
abs( mean(mtcars[mtcars$cyl==4,]$hp, na.rm=TRUE) -
mean(mtcars[mtcars$cyl==8,]$hp, na.rm=TRUE) )
head(mtcars[mtcars$cyl==4,])
head(mtcars[mtcars$cyl==8,])
debug(ls)
mean(iris[iris$Species=="virginica",]$Sepal.Length, na.rm=TRUE)
abs( mean(mtcars[mtcars$cyl==4,]$hp, na.rm=TRUE) -
mean(mtcars[mtcars$cyl==8,]$hp, na.rm=TRUE) )
debug(ls)
a <- c(1:5);  b <- c(11:15)
ls(a~b)
2
1
``
3
4
5
workingpath <- "C:\\Users\\pc\\Desktop\\Jihan\\Rprogramming"
#workingpath <- "C:\\Users\\MED1\\Desktop\\Coursera\\project\\Rprogramming"
setwd(workingpath)
read.outcome <- function(filename){
library(stringr)
outcome <- read.csv(filename, header=TRUE, colClasses="character")
name.outcome <- names(outcome)
death.id <- which(name.outcome %in% grep("^Hospital.30.Day.Death", name.outcome, value=TRUE))
hosp.state.id <- which(name.outcome %in% c("Hospital.Name", "State"))
outcome.id <- sort(c(hosp.state.id, death.id))
outcome.death <- subset(outcome, select=outcome.id)
outcome.death[, 3] <- as.numeric(outcome.death[,3])
outcome.death[, 4] <- as.numeric(outcome.death[,4])
outcome.death[, 5] <- as.numeric(outcome.death[,5])
return(outcome.death)
}
best <- function(state, outcome) {
options(warn = -1)
## Read outcome data
outcome.data <- read.outcome("outcome-of-care-measures.csv")
## Check that state and outcome are valid
disease <- c("heart attack", "heart failure", "pneumonia")
state.name <- names(table(outcome.data$State))
if(!(state %in% state.name)){ stop("invalid state") }
if(!(outcome %in% disease)){ stop("invalid outcome") }
## Return hospital name in that state with lowest 30-day death rate
disease.id <- which(disease==outcome) + 2
outcome.state <- outcome.data[outcome.data$State==state,]
min.id <- which( outcome.state[,disease.id] == min(outcome.state[,disease.id], na.rm=TRUE) )
return(outcome.state$Hospital.Name[min.id])
}
best("TX", "heart attack")
